# shellcheck shell=sh
# vi:ts=2 sw=2 tw=79 et lbr wrap
# Copyright 2020-current David Rabkin
# General framework to run a shell script. Defines global variables and
# functions. Prevents multiple instances.

IAM=$(basename -- "$0")
IAM="${IAM%.*}"
LOG="/tmp/$IAM-log"
LCK="/tmp/$IAM-lck"

# Prints timestamp before arguments.
tim() {
  date +"%Y%m%d-%H:%M:%S $*"
}

# Truncates log file in case it is more than 10MB.
truncate() {
  if [ ! -f "$LOG" ]; then
    return
  fi
  if [ "$(wc -c <"$LOG")" -lt 10485760 ]; then
    return
  fi
  : > "$LOG"
  log "$LOG is truncated."
}

# Information logger.
log() {
  truncate
  tim "I $*" | tee -a "$LOG"
}

# Error logger.
loge() {
  truncate
  tim "E $*" | tee -a "$LOG" 1>&2
}

# Prints error and exits.
die() {
  loge "$@"
  exit 1
}

# Checks if the command exists.
validate() {
  command -v "$1" >/dev/null 2>&1 || die "Install $1."
}

# Die if not root.
be_root() {
  if [ "$(id -u)" -ne '0' ]; then
    die "$IAM must be executed with root privileges."
  fi
}

# Calculates duration time for report. The first parameter is start time.
duration() {
  dur="$(($(date +%s) - $1))"
  printf "%d:%02d:%02d" \
    $((dur / 3600)) \
    $((dur % 3600 / 60)) \
    $((dur % 60))
}

hi() {
  log "$IAM says hi."
  BEG="$(date +%s)"
}

bye() {
  log "$IAM says bye after $(duration "$BEG")."
}

# General exit handler, is called on EXIT.
cleanup() {
  err=$?
  rm -f "$LCK"
  bye
  trap '' EXIT INT TERM
  exit $err
}

# Prevents double cleanup, see more:
#   https://unix.stackexchange.com/questions/57940/trap-int-term-exit-really-necessary
sig_cleanup() {
  # Some shells will call EXIT after the INT handler.
  trap '' EXIT
  # Sets $?.
  false
  cleanup
}

# Start point.
hi
trap cleanup EXIT
trap sig_cleanup INT QUIT TERM

# Prevents multiple instances.
if [ -e "$LCK" ] && kill -0 "$(cat "$LCK")"; then
  die "$IAM is already running."
fi
echo $$ > "$LCK"
