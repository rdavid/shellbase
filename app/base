# shellcheck shell=sh
# vi:ts=2 sw=2 tw=79 et lbr wrap
# Copyright 2020-current David Rabkin
#
# The script uses local variables which are not POSIX but supported by most
# shells, see more:
#  https://stackoverflow.com/questions/18597697/posix-compliant-way-to-scope-variables-to-a-function-in-a-shell-script
# Disables shellcheck warning about using non POSIX features.
# shellcheck disable=SC2039
#
# General framework to run a client shell script. Defines global variables and
# functions. Handles multiple instances. All functions started with base_ are
# internal and should not be used by clients. All functions without base_ are
# API and should be used by clients. API functions are: log, loge, die,
# validate, be_root, yes_to_continue. Global variables has BASE_ prefix and
# clients could use them. Client should place all temporaly files under
# $BASE_LCK.

BASE_IAM=$(basename -- "$0")
BASE_IAM="${BASE_IAM%.*}"
BASE_TMP='/tmp'
BASE_LCK=$(mktemp -d "$BASE_TMP/$BASE_IAM.XXX")
BASE_LOG="$BASE_LCK/log"
BASE_LNL=true

# Prints timestamp before arguments.
base_tim() {
  local pat='%s %s'
  if $BASE_LNL; then
    pat="$pat\n"
  fi
  printf "$pat" "$(date +"%Y%m%d-%H:%M:%S")" "$*"
}

# Truncates log file in case it is more than 10MB.
base_truncate() {
  if [ ! -f "$BASE_LOG" ]; then
    return
  fi
  if [ "$(wc -c <"$BASE_LOG")" -lt 10485760 ]; then
    return
  fi
  : > "$BASE_LOG"
  log "$BASE_LOG is truncated."
}

# Information logger.
log() {
  base_truncate
  base_tim "I $*" | tee -a "$BASE_LOG"
}

# Error logger.
loge() {
  base_truncate
  base_tim "E $*" | tee -a "$BASE_LOG" 1>&2
}

# Prints error and exits.
die() {
  loge "$@"
  exit 1
}

# Checks if the command exists.
validate() {
  command -v "$1" >/dev/null 2>&1 || die "Install $1."
}

# Die if not root.
be_root() {
  if [ "$(id -u)" -ne '0' ]; then
    die "$BASE_IAM must be executed with root privileges."
  fi
}

# Asks a user permission to continue, exit if not 'y'.
yes_to_continue() {
  BASE_LNL=false
  log 'Do you want to continue? [y/N] '
  BASE_LNL=true
  local keep=$(stty -g)
  stty raw -echo; ans=$(head -c 1); stty "$keep"
  printf '\n'
  if ! printf '%s' "$ans" | grep -iq '^y'; then
    exit 0
  fi
}

# Calculates duration time for report. The first parameter is start time.
base_duration() {
  local dur="$(($(date +%s) - $1))"
  printf "%d:%02d:%02d" \
    $((dur / 3600)) \
    $((dur % 3600 / 60)) \
    $((dur % 60))
}

base_hi() {
  log "$BASE_IAM says hi."
  BEG="$(date +%s)"
}

base_bye() {
  log "$BASE_IAM says bye after $(base_duration "$BEG")."
}

# General exit handler, is called on EXIT. Any first parameter means no exit.
base_cleanup() {
  local err=$?
  base_bye
  # Keeps logs of last finished instance. Could be a possible problem.
  cp -f "$BASE_LCK/log" "$BASE_TMP/$BASE_IAM-log"
  rm -rf "$BASE_LCK"
  trap '' EXIT INT TERM
  # Parameter expantion defines if the parameter is not set, which means exit.
  if [ -z ${1+x} ]; then
    exit $err
  fi
}

# Prevents double cleanup, see more:
#   https://unix.stackexchange.com/questions/57940/trap-int-term-exit-really-necessary
base_sig_cleanup() {
  local err=$?
  # Some shells will call EXIT after the INT handler.
  trap '' EXIT
  base_cleanup 1
  exit $err
}

# Asks to continue if multiple instances.
base_check_instances() {
  local ins=0
  # Finds process IDs of all possible instances in /tmp/<script-name.*>/pid and
  # writes them to the pipe. Loop reads the PIDs from the pipe and counts only
  # running processes.
  local pipe="$BASE_LCK/pipe"
  mkfifo "$pipe"
  find "$BASE_TMP/$BASE_IAM".* -name "pid" -exec cat {} \; > "$pipe" &
  while read -r p; do
    kill -0 "$p" >/dev/null 2>&1 && ins=$((ins + 1))
  done < "$pipe"
  rm "$pipe"

  # My instance is running!
  local pid="$BASE_LCK/pid"
  echo $$ > "$pid"

  # Asks permission in case of multiple instances.
  if [ $ins -ne 0 ]; then
    local ending
    if [ $ins -gt 1 ]; then
      ending='es'
    else
      ending='e'
    fi
    printf "%d instanc%s of %s are running.\n" $ins $ending $BASE_IAM
    yes_to_continue
  fi
}

# Start point.
base_hi
trap base_cleanup EXIT
trap base_sig_cleanup INT QUIT TERM
base_check_instances
